#!/usr/bin/env python
#
# Electrum - lightweight Bitcoin client
# Copyright (C) 2011 thomasv@gitorious
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import re, sys, getpass

from optparse import OptionParser
from wallet import Wallet, SecretToASecret
from interface import Interface
from decimal import Decimal


from wallet import format_satoshis

if __name__ == '__main__':
    known_commands = ['help', 'validateaddress', 'balance', 'contacts', 'create', 'restore', 'payto', 'sendtx', 'password', 'addresses', 'history', 'label', 'mktx','seed','import','signmessage','verifymessage','eval']

    usage = "usage: %prog [options] command args\nCommands: "+ (', '.join(known_commands))

    parser = OptionParser(usage=usage)
    parser.add_option("-g", "--gui", dest="gui", default="qt", help="gui")
    parser.add_option("-w", "--wallet", dest="wallet_path", help="wallet path (default: electrum.dat)")
    parser.add_option("-a", "--all", action="store_true", dest="show_all", default=False, help="show all addresses")
    parser.add_option("-b", "--balance", action="store_true", dest="show_balance", default=False, help="show the balance at listed addresses")
    parser.add_option("-k", "--keys",action="store_true", dest="show_keys",default=False, help="show the private keys of listed addresses")
    parser.add_option("-f", "--fee", dest="tx_fee", default="0.005", help="set tx fee")
    parser.add_option("-s", "--fromaddr", dest="from_addr", default=None, help="set source address for payto/mktx. if it isn't in the wallet, it will ask for the private key unless supplied in the format public_key:private_key. It's not saved in the wallet.")
    parser.add_option("-c", "--changeaddr", dest="change_addr", default=None, help="set the change address for payto/mktx. default is a spare address, or the source address if it's not in the wallet")
    parser.add_option("-r", "--remote", dest="remote_url", default=None, help="URL of a remote wallet")
    options, args = parser.parse_args()

    interface = Interface()
    wallet = Wallet(interface)
    wallet.set_path(options.wallet_path)

    if options.remote_url:
        m = re.match('^(.*?)@(.*?)$', options.remote_url)
        # header authentication is not supported
        if m:
            wallet.remote_url = 'http://'+m.group(2)
            wallet.remote_password = m.group(1)
        else:
            print "bad url"
            sys.exit(1)
    else:
        wallet.remote_url = None
    

    if len(args)==0:
        url = None
        cmd = 'gui'
    elif len(args)==1 and re.match('^bitcoin:', args[0]):
        url = args[0]
        cmd = 'gui'
    else:
        cmd = args[0]
        firstarg = args[1] if len(args) > 1 else ''
        
    if cmd == 'gui':
        if options.gui=='gtk':
            import gui
        elif options.gui=='qt':
            import gui_qt as gui
        else:
            print "unknown gui", options.gui
            exit(1)

        interface.get_servers()
        gui = gui.ElectrumGui(wallet)

        try:
            found = wallet.read()
            if not found:
                found = gui.restore_or_create()
        except BaseException, e:
            import traceback
            traceback.print_exc(file=sys.stdout)
            #gui.show_message(e.message)
            exit(1)

        if not found: exit(1)

        interface.start(wallet)
        gui.main(url)
        wallet.save()
        sys.exit(0)

    if cmd not in known_commands:
        cmd = 'help'

    if not wallet.read() and cmd not in ['help','create','restore']:
        print "Wallet file not found."
        print "Type 'electrum.py create' to create a new wallet, or provide a path to a wallet with the -d option"
        sys.exit(0)
    
    if cmd in ['create', 'restore']:
        import mnemonic
        if wallet.read():
            print "remove the existing wallet first!"
            sys.exit(0)
        password = getpass.getpass("Password (hit return if you do not wish to encrypt your wallet):")
        if password:
            password2 = getpass.getpass("Confirm password:")
            if password != password2:
                print "error"
                sys.exit(1)
        else:
            password = None

        host = raw_input("server (default:%s):"%interface.host)
        port = raw_input("port (default:%d):"%interface.port)
        fee = raw_input("fee (default:%s):"%( str(Decimal(wallet.fee)/100000000)) )
        gap = raw_input("gap limit (default 5):")
        if host: interface.host = host
        if port: interface.port = int(port)
        if fee: wallet.fee = float(fee)
        if gap: wallet.gap_limit = int(gap)

        if cmd == 'restore':
            seed = raw_input("seed:")
            try:
                seed.decode('hex')
            except:
                print "not hex, trying decode"
                seed = mnemonic.mn_decode( seed.split(' ') )
            if not seed:
                print "no seed"
                sys.exit(1)

            wallet.seed = str(seed)
            print "recovering wallet..."
            wallet.init_mpk( wallet.seed ) # not encrypted at this point
            wallet.synchronize()
            if wallet.is_found():
                wallet.fill_addressbook()
                wallet.save()
                print "recovery successful"
            else:
                print "found no history for this wallet"
        else:
            wallet.new_seed(None)
            wallet.save()
            print "Your wallet generation seed is: " + wallet.seed
            print "Please keep it in a safe place; if you lose it, you will not be able to restore your wallet."
            print "Equivalently, your wallet seed can be stored and recovered with the following mnemonic code:"
            print "\""+' '.join(mnemonic.mn_encode(wallet.seed))+"\""

    # check syntax
    if cmd in ['payto', 'mktx']:
        try:
            to_address = args[1]
            amount = int( 100000000 * Decimal(args[2]) )
            change_addr = None
            label = ' '.join(args[3:])
            if options.tx_fee: 
                options.tx_fee = int( 100000000 * Decimal(options.tx_fee) )
        except:
            firstarg = cmd
            cmd = 'help'

    # open session
    if cmd not in ['password', 'mktx', 'history', 'label', 'contacts', 'help', 'validateaddress', 'signmessage', 'verifymessage', 'eval', 'create']:
        interface.new_session(wallet.all_addresses(), wallet.electrum_version)
        interface.update_wallet(wallet)
        wallet.save()

    # check if --from_addr not in wallet (for mktx/payto)
    is_temporary = False
    from_addr = None
    if options.from_addr:
        from_addr = options.from_addr
        if from_addr not in wallet.all_addresses():
            is_temporary = True
                
    # commands needing password
    if cmd in ['payto', 'password', 'mktx', 'seed', 'import','signmessage' ] or ( cmd=='addresses' and options.show_keys):
        password = getpass.getpass('Password:') if wallet.use_encryption and not is_temporary else None
        # check password
        try:
            wallet.pw_decode( wallet.seed, password)
        except:
            print "invalid password"
            exit(1)

    if cmd == 'import':
        keypair = args[1]
        if wallet.import_key(keypair,password):
            print "keypair imported"
        else:
            print "error"
        wallet.save()

    if cmd=='help':
        cmd2 = firstarg
        if cmd2 not in known_commands:
            print "known commands:", ', '.join(known_commands)
            print "'electrum help <command>' shows the help on a specific command"
            print "'electrum --help' shows the list of options"
        elif cmd2 == 'balance':
            print "Display the balance of your wallet or a specific address. The address does not have to be a owned address (you know the private key)."
            print "syntax: balance [<address>]"
        elif cmd2 == 'contacts':
            print "show your list of contacts"
        elif cmd2 == 'payto':
            print "payto <recipient> <amount> [label]"
            print "create and broadcast a transaction."
            print "<recipient> can be a bitcoin address or a label"
            print "options: --fee, --fromaddr, --changeaddr"
        elif cmd2== 'sendtx':
            print "sendtx <tx>"
            print "broadcast a transaction to the network. <tx> must be in hexadecimal"
        elif cmd2 == 'password':
            print "change your password"
        elif cmd2 == 'addresses':
            print "show your list of addresses. options: -a, -k, -b"
        elif cmd2 == 'history':
            print "show the transaction history"
        elif cmd2 == 'label':
            print "assign a label to an item"
        elif cmd2 == 'gtk':
            print "start the GUI"
        elif cmd2 == 'mktx':
            print "create a signed transaction. password protected"
            print "syntax: mktx <recipient> <amount> [label]"
            print "options: --fee, --fromaddr, --changeaddr"
        elif cmd2 == 'seed':
            print "show generation seed of your wallet. password protected."
        elif cmd2 == 'eval':
            print "Run python eval() on an object\nSyntax: eval <expression>\nExample: eval \"wallet.aliases\""

    elif cmd == 'seed':
        import mnemonic
        seed = wallet.pw_decode( wallet.seed, password)
        print seed, '"'+' '.join(mnemonic.mn_encode(seed))+'"'

    elif cmd == 'validateaddress':
        addr = args[1]
        print wallet.is_valid(addr)

    elif cmd == 'balance':
        try:
            addrs = args[1:]
        except:
            pass
        if addrs == []:
            c, u = wallet.get_balance()
            if u:
                print Decimal( c ) / 100000000 , Decimal( u ) / 100000000
            else:
                print Decimal( c ) / 100000000
        else:
            for addr in addrs:
                c, u = wallet.get_addr_balance(addr)
                if u:
                    print "%s %s, %s" % (addr, str(Decimal(c)/100000000), str(Decimal(u)/100000000))
                else:
                    print "%s %s" % (addr, str(Decimal(c)/100000000))

    elif cmd in [ 'contacts']:
        for addr in wallet.addressbook:
            print addr, "   ", wallet.labels.get(addr)

    elif cmd == 'eval':
        print eval(args[1])
        wallet.save()

    elif cmd in [ 'addresses']:
        for addr in wallet.all_addresses():
            if options.show_all or not wallet.is_change(addr):
                label = wallet.labels.get(addr)
                _type = ''
                if wallet.is_change(addr): _type = "[change]"
                if addr in wallet.imported_keys.keys(): _type = "[imported]"
                if label is None: label = ''
                if options.show_balance:
                    h = wallet.history.get(addr,[])
                    ni = no = 0
                    for item in h:
                        if item['is_in']:  ni += 1
                        else:              no += 1
                    b = "%d %d %s"%(no, ni, str(Decimal(wallet.get_addr_balance(addr)[0])/100000000))
                else: b=''
                if options.show_keys:
                    pk = wallet.get_private_key(addr, password)
                    addr = addr + ':' + SecretToASecret(pk)
                print addr, b, _type, label

    if cmd == 'history':
        lines = wallet.get_tx_history()
        b = 0 
        for line in lines:
            import datetime
            v = line['value'] 
            b += v
            try:
                time_str = datetime.datetime.fromtimestamp( line['nTime']) 
            except:
                print line['nTime']
                time_str = 'pending'
            label = line.get('label')
            if not label: label = line['tx_hash']
            else: label = label + ' '*(64 - len(label) )

            print time_str , "  " + label + "  " + format_satoshis(v)+ "  "+ format_satoshis(b)
        print "# balance: ", format_satoshis(b)

    elif cmd == 'label':
        try:
            tx = args[1]
            label = ' '.join(args[2:])
        except:
            print "syntax:  label <tx_hash> <text>"
            sys.exit(1)
        wallet.labels[tx] = label
        wallet.save()
            
    elif cmd in ['payto', 'mktx']:
        if from_addr and is_temporary:
            if from_addr.find(":") == -1:
                keypair = from_addr + ":" + getpass.getpass('Private key:')
            else:
                keypair = from_addr
                from_addr = keypair.split(':')[0]
            if not wallet.import_key(keypair,password):
                print "invalid key pair"
                exit(1)
            wallet.history[from_addr] = interface.retrieve_history(from_addr)
            wallet.update_tx_history()
            change_addr = from_addr

        if options.change_addr:
            change_addr = options.change_addr

        for k, v in wallet.labels.items():
            if v == to_address:
                to_address = k
                print "alias", to_address
                break
            if change_addr and v == change_addr:
                change_addr = k
        try:
            tx = wallet.mktx( to_address, amount, label, password,
                fee = options.tx_fee, change_addr = change_addr, from_addr = from_addr )
        except:
            import traceback
            traceback.print_exc(file=sys.stdout)
            tx = None

        if tx and cmd=='payto': 
            r, h = wallet.sendtx( tx )
            print h
        else:
            print tx

        if is_temporary:
            wallet.imported_keys.pop(from_addr)
            del(wallet.history[from_addr])
        wallet.save()

    elif cmd == 'sendtx':
        tx = args[1]
        r, h = wallet.sendtx( tx )
        print h

    elif cmd == 'password':
        try:
            seed = wallet.pw_decode( wallet.seed, password)
        except:
            print "sorry"
            sys.exit(1)
        new_password = getpass.getpass('New password:')
        if new_password == getpass.getpass('Confirm new password:'):
            wallet.use_encryption = (new_password != '')
            wallet.seed = wallet.pw_encode( seed, new_password)
            for k in wallet.imported_keys.keys():
                a = wallet.imported_keys[k]
                b = wallet.pw_decode(a, password)
                c = wallet.pw_encode(b, new_password)
                wallet.imported_keys[k] = c
            wallet.save()
        else:
            print "error: mismatch"

    elif cmd == 'signmessage':
        address, message = args[1:3]
        print wallet.sign_message(address, message, password)

    elif cmd == 'verifymessage':
        address, signature, message = args[1:4]
        try:
            wallet.verify_message(address, signature, message)
            print True
        except:
            print False
        

