#!/usr/bin/env python
#
# Electrum - lightweight Bitcoin client
# Copyright (C) 2011 thomasv@gitorious
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import re
import sys, os, time, json
import optparse
import platform

try:
    import ecdsa  
except ImportError:
    sys.exit("Error: python-ecdsa does not seem to be installed. Try 'sudo pip install ecdsa'")

try:
    import aes
except ImportError:
    sys.exit("Error: AES does not seem to be installed. Try 'sudo pip install slowaes'")

try:
    from lib import *
except ImportError:
    from electrum import *

from decimal import Decimal



# get password routine
def prompt_password(prompt, confirm=True):
    import getpass
    if sys.stdin.isatty():
        password = getpass.getpass(prompt)
        if password and confirm:
            password2 = getpass.getpass("Confirm: ")
            if password != password2:
                sys.exit("Error: Passwords do not match.")
    else:
        password = raw_input(prompt)
    if not password:
        password = None
    return password

def arg_parser():
    usage = "usage: %prog [options] command\nCommands: "+ (', '.join(known_commands))
    parser = optparse.OptionParser(prog=usage)
    parser.add_option("-g", "--gui", dest="gui", help="User interface: qt, lite, gtk or text")
    parser.add_option("-w", "--wallet", dest="wallet_path", help="wallet path (default: electrum.dat)")
    parser.add_option("-o", "--offline", action="store_true", dest="offline", default=False, help="remain offline")
    parser.add_option("-a", "--all", action="store_true", dest="show_all", default=False, help="show all addresses")
    parser.add_option("-b", "--balance", action="store_true", dest="show_balance", default=False, help="show the balance of listed addresses")
    parser.add_option("-l", "--labels", action="store_true", dest="show_labels", default=False, help="show the labels of listed addresses")

    parser.add_option("-f", "--fee", dest="tx_fee", default="0.005", help="set tx fee")
    parser.add_option("-F", "--fromaddr", dest="from_addr", default=None, help="set source address for payto/mktx. if it isn't in the wallet, it will ask for the private key unless supplied in the format public_key:private_key. It's not saved in the wallet.")
    parser.add_option("-c", "--changeaddr", dest="change_addr", default=None, help="set the change address for payto/mktx. default is a spare address, or the source address if it's not in the wallet")
    parser.add_option("-s", "--server", dest="server", default=None, help="set server host:port:protocol, where protocol is t or h")
    parser.add_option("-p", "--proxy", dest="proxy", default=None, help="set proxy [type:]host[:port], where type is socks4,socks5 or http")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False, help="show debugging information")
    parser.add_option("-P", "--portable", action="store_true", dest="portable", default=False, help="portable wallet")
    parser.add_option("-L", "--lang", dest="language", default=None, help="defaut language used in GUI")
    parser.add_option("-u", "--usb", dest="bitkey", action="store_true", help="Turn on support for hardware wallets (EXPERIMENTAL)")
    return parser


if __name__ == '__main__':

    parser = arg_parser()
    options, args = parser.parse_args()
    set_verbosity(options.verbose)

    # config is an object passed to the various constructors (wallet, interface, gui)
    if 'ANDROID_DATA' in os.environ:
        config_options = {'wallet_path':"/sdcard/electrum.dat", 'portable':True, 'verbose':True, 'gui':'android'}
    else:
        config_options = eval(str(options))
        for k, v in config_options.items():
            if v is None: config_options.pop(k)

    # Wallet migration on Electrum 1.7
    # Todo: In time we could remove this again
    if platform.system() == "Windows":
        util.check_windows_wallet_migration()

    config = SimpleConfig(config_options)
    wallet = Wallet(config)

    if len(args)==0:
        url = None
        cmd = 'gui'
    elif len(args)==1 and re.match('^bitcoin:', args[0]):
        url = args[0]
        cmd = 'gui'
    else:
        cmd = args[0]
        firstarg = args[1] if len(args) > 1 else ''
       
    #this entire if/else block is just concerned with importing the 
    #right GUI toolkit based the GUI command line option given 
    if cmd == 'gui':
        pref_gui = config.get('gui','classic')

        if pref_gui == 'gtk':
            try:
                import lib.gui as gui
            except ImportError:
                import electrum.gui as gui
        elif pref_gui in ['classic', 'qt']:
            try:
                import lib.gui_qt as gui
            except ImportError:
                import electrum.gui_qt as gui
        elif pref_gui == 'lite':
              try:
                  import lib.gui_lite as gui
              except ImportError:
                  import electrum.gui_lite as gui
        elif pref_gui == 'text':
              try:
                  import lib.gui_text as gui
              except ImportError:
                  import electrum.gui_text as gui
        elif pref_gui == 'android':
              try:
                  import lib.gui_android as gui
              except ImportError:
                  import electrum.gui_android as gui
        else:
            sys.exit("Error: Unknown GUI: " + pref_gui )

        
        interface = Interface(config, True)
        wallet.interface = interface
        interface.start()
        if interface.is_connected:
            interface.send([('server.peers.subscribe',[])])

        set_language(config.get('language'))
        gui = gui.ElectrumGui(wallet, config)

        found = config.wallet_file_exists
        if not found:
            a = gui.restore_or_create()
            if not a: exit()
            # select a server.
            s = gui.network_dialog()

            if a =='create':
                wallet.init_seed(None)
            else:
                # ask for seed and gap.
                sg = gui.seed_dialog()
                if not sg: exit()
                seed, gap = sg
                if not seed: exit()
                wallet.gap_limit = gap
                if len(seed) == 128:
                    wallet.seed = ''
                    wallet.sequence.master_public_key = seed
                else:
                    wallet.init_seed(str(seed))
            

            # generate the first addresses, in case we are offline
            if s is None or a == 'create':
                wallet.synchronize()
            if a == 'create':
                # display seed
                gui.show_seed()

        verifier = WalletVerifier(interface, config)
        wallet.set_verifier(verifier)
        synchronizer = WalletSynchronizer(wallet, config)
        synchronizer.start()

        if not found and a == 'restore' and s is not None:
            try:
                keep_it = gui.restore_wallet()
                wallet.fill_addressbook()
            except:
                import traceback
                traceback.print_exc(file=sys.stdout)
                exit()

            if not keep_it: exit()

        if not found:
            gui.password_dialog()

        wallet.save()
        verifier.start()
        gui.main(url)
        wallet.save()

        verifier.stop()
        synchronizer.stop()
        interface.stop()

        # we use daemon threads, their termination is enforced.
        # this sleep command gives them time to terminate cleanly. 
        time.sleep(0.1)
        sys.exit(0)

    if cmd not in known_commands:
        cmd = 'help'

    if not config.wallet_file_exists and cmd not in ['help','create','restore']:
        print_msg("Error: Wallet file not found.")
        print_msg("Type 'electrum create' to create a new wallet, or provide a path to a wallet with the -w option")
        sys.exit(0)
    
    if cmd in ['create', 'restore']:
        if config.wallet_file_exists:
            sys.exit("Error: Remove the existing wallet first!")
        password = prompt_password("Password (hit return if you do not wish to encrypt your wallet):")

        server = config.get('server')
        if not server: server = pick_random_server()
        w_host, w_port, w_protocol = server.split(':')
        host = raw_input("server (default:%s):"%w_host)
        port = raw_input("port (default:%s):"%w_port)
        protocol = raw_input("protocol [t=tcp;h=http;n=native] (default:%s):"%w_protocol)
        fee = raw_input("fee (default:%s):"%( str(Decimal(wallet.fee)/100000000)) )
        gap = raw_input("gap limit (default 5):")
        if host: w_host = host
        if port: w_port = port
        if protocol: w_protocol = protocol
        wallet.config.set_key('server', w_host + ':' + w_port + ':' +w_protocol)
        if fee: wallet.fee = float(fee)
        if gap: wallet.gap_limit = int(gap)

        if cmd == 'restore':
            seed = raw_input("seed:")
            try:
                seed.decode('hex')
            except:
                print_error("Warning: Not hex, trying decode.")
                seed = mnemonic_decode( seed.split(' ') )
            if not seed:
                sys.exit("Error: No seed")

            if len(seed) == 128:
                wallet.seed = None
                wallet.sequence.master_public_key = seed
            else:
                wallet.seed = str(seed)
                wallet.init_mpk( wallet.seed )

            if not options.offline:
                interface = Interface(config)
                interface.start()
                wallet.interface = interface

                verifier = WalletVerifier(interface, config)
                wallet.set_verifier(verifier)

                print_msg("Recovering wallet...")
                WalletSynchronizer(wallet, config).start()
                wallet.update()
                if wallet.is_found():
                    print_msg("Recovery successful")
                else:
                    print_msg("Warning: Found no history for this wallet")
            else:
                wallet.synchronize()
            wallet.fill_addressbook()
            wallet.save()
            print_msg("Wallet saved in '%s'"%wallet.config.path)
        else:
            wallet.init_seed(None)
            wallet.synchronize() # there is no wallet thread 
            wallet.save()
            print_msg("Your wallet generation seed is: " + wallet.seed)
            print_msg("Please keep it in a safe place; if you lose it, you will not be able to restore your wallet.")
            print_msg("Equivalently, your wallet seed can be stored and recovered with the following mnemonic code:")
            print_msg("\""+' '.join(mnemonic_encode(wallet.seed))+"\"")
            print_msg("Wallet saved in '%s'"%wallet.config.path)
            
        if password:
            wallet.update_password(wallet.seed, None, password)

        # terminate
        sys.exit(0)


    # open session
    if cmd not in offline_commands and not options.offline:
        interface = Interface(config)
        interface.register_callback('connected', lambda: sys.stderr.write("Connected to " + interface.connection_msg + "\n"))
        interface.start()
        wallet.interface = interface
        verifier = WalletVerifier(interface, config)
        wallet.set_verifier(verifier)
        synchronizer = WalletSynchronizer(wallet, config)
        synchronizer.start()
        wallet.update()
        wallet.save()


                
    # important warning
    if cmd in ['dumpprivkey', 'dumpprivkeys']:
        print_msg("WARNING: ALL your private keys are secret.")
        print_msg("Exposing a single private key can compromise your entire wallet!")
        print_msg("In particular, DO NOT use 'redeem private key' services proposed by third parties.")

    # commands needing password
    if cmd in protected_commands:
        if wallet.use_encryption:
            password = prompt_password('Password:', False)
            if not password:
                print_msg("Error: Password required")
                exit(1)
            # check password
            try:
                seed = wallet.decode_seed(password)
            except:
                print_msg("Error: This password does not decode this wallet.")
                exit(1)
        else:
            password = None
            seed = wallet.seed
    else:
        password = None


    # check and format the arguments
    if cmd == 'importprivkey':
        # See if they specificed a key on the cmd line, if not prompt
        if len(args) == 1:
            args[1] = prompt_password('Enter PrivateKey (will not echo):', False)

    elif cmd == 'signmessage':
        if len(args) < 3:
            print_msg("Error: Invalid usage of signmessage.")
            print_msg(known_commands[cmd])
            sys.exit(1)
        address = args[1]
        message = ' '.join(args[2:])
        if len(args) > 3:
            print_msg("Warning: Message was reconstructed from several arguments:", repr(message))
        args = [ cmd, address, message ]

    elif cmd == 'verifymessage':
        try:
            address = args[1]
            signature = args[2]
            message = ' '.join(args[3:])
        except:
            print_msg("Error: Not all parameters were given, displaying help instead.")
            print_msg(known_commands[cmd])
            sys.exit(1)
        if len(args) > 4:
            print_msg("Warning: Message was reconstructed from several arguments:", repr(message))
        args = [ cmd, address, signature, message]

    elif cmd == 'signrawtransaction':
        import json
        args = [ cmd, args[1], json.loads(args[2]) if len(args)>2 else [], json.loads(args[3]) if len(args)>3 else []]

    elif cmd == 'createmultisig':
        args = [ cmd, int(args[1]), json.loads(args[2])]

    elif cmd == 'createrawtransaction':
        args = [ cmd, json.loads(args[1]), json.loads(args[2])]

    elif cmd=='listaddresses':
        args = [cmd, options.show_all, options.show_balance, options.show_labels]
                
    elif cmd == 'setlabel':
        try:
            tx = args[1]
            label = ' '.join(args[2:])
        except:
            print_msg("Error. Syntax:  label <tx_hash> <text>")
            sys.exit(1)
        args = [ cmd, tx, label ]

    elif cmd in ['payto', 'mktx']:

        #is_temporary = False
        from_addr = None
        if options.from_addr:
            from_addr = options.from_addr
            if from_addr not in wallet.all_addresses():
                #is_temporary = True
                raise BaseException("address not in wallet")

        try:
            to_address = args[1]
            amount = Decimal(args[2])
            change_addr = None
            label = ' '.join(args[3:])
            if options.tx_fee: 
                options.tx_fee = Decimal(options.tx_fee)
        except:
            firstarg = cmd
            cmd = 'help'

        #if from_addr and is_temporary:
        #    if from_addr.find(":") == -1:
        #        keypair = from_addr + ":" + prompt_password('Private key:', False)
        #    else:
        #        keypair = from_addr
        #        from_addr = keypair.split(':')[0]
        #    if not wallet.import_key(keypair,password):
        #        print_msg("Error: Invalid key pair")
        #        exit(1)
        #    wallet.history[from_addr] = interface.retrieve_history(from_addr)
        #    wallet.update_tx_history()
        #    change_addr = from_addr

        if options.change_addr:
            change_addr = options.change_addr
            
        args = [ 'mktx', to_address, amount, options.tx_fee, options.change_addr, from_addr ]

        #if is_temporary:
        #    wallet.imported_keys.pop(from_addr)
        #    del(wallet.history[from_addr])
        #wallet.save()



    # run the command
    if cmd == 'help':
        cmd2 = firstarg
        if cmd2 not in known_commands:
            parser.print_help()
            print_msg("Type 'electrum help <command>' to see the help for a specific command")
            print_msg("Type 'electrum --help' to see the list of options")
            print_msg("List of commands:", ', '.join(known_commands))
        else:
            print_msg(known_commands[cmd2])

    elif cmd == 'deseed':
        if not wallet.seed:
            print_msg("Error: This wallet has no seed")
        else:
            ns = wallet.config.path + '.seedless'
            print_msg("Warning: you are going to create a seedless wallet'\nIt will be saved in '%s'"%ns)
            if raw_input("Are you sure you want to continue? (y/n) ") in ['y','Y','yes']:
                wallet.config.path = ns
                wallet.seed = ''
                wallet.use_encryption = False
                wallet.config.set_key('seed','', True)
                for k in wallet.imported_keys.keys(): wallet.imported_keys[k] = ''
                wallet.save()
                print_msg("Done.")
            else:
                print_msg("Action canceled.")

    elif cmd == 'eval':
        print_msg(eval(args[1]))
        wallet.save()

    elif cmd == 'get':
        key = args[1]
        print_msg(wallet.config.get(key))

    elif cmd == 'set':
        key, value = args[1:3]
        if key not in ['seed', 'seed_version', 'master_public_key', 'use_encryption']:
            wallet.config.set_key(key, value, True)
            print_msg(True)
        else:
            print_msg(False)


    elif cmd == 'password':
        new_password = prompt_password('New password:')
        wallet.update_password(seed, password, new_password)



    else:
        cmd_runner = Commands(wallet, interface)
        func = eval('cmd_runner.' + cmd)
        cmd_runner.password = password
        result = func(*args[1:])
        if type(result) == str:
            util.print_msg(result)
        else:
            util.print_json(result)
            
        

    if cmd not in offline_commands and not options.offline:
        verifier.stop()
        synchronizer.stop()
        interface.stop()
        time.sleep(0.1)
        sys.exit(0)
